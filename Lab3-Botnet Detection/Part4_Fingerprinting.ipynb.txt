{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from io import StringIO\n",
    "import csv\n",
    "from pandas import read_csv\n",
    "import numpy as np\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.cluster import KMeans\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import defaultdict\n",
    "from nltk import ngrams\n",
    "import collections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = StringIO()\n",
    "csv_writer = csv.writer(output)\n",
    "column_name = ['Dateflowstart', 'Durat', 'Prot', 'SrcIPAddr:Port', 'DstIPAddr:Port', 'Flags', 'Tos', 'PacketsBytes', 'Flows', 'Label', 'Labels']\n",
    "Botnet_data = pd.DataFrame(columns = column_name)\n",
    "with open('capture20110818.pcap', 'rb') as f:\n",
    "    next(f)\n",
    "    for index, line in enumerate(f):\n",
    "        #print(line)\n",
    "        parser = line.decode(\"utf-8\")\n",
    "        split_by_space = parser.split('\\t')\n",
    "        #print(parser)\n",
    "        #print(split_by_space)\n",
    "        temp1 =  [x for x in split_by_space if x != '->']\n",
    "        temp2 =  [x for x in temp1 if x != '']\n",
    "        temp2[-1] = temp2[-1].split('\\n')[0]\n",
    "        #print(temp2)\n",
    "        if(len(temp2)==1):\n",
    "            \n",
    "            #print(line)\n",
    "            #print(parser)\n",
    "            split_by_space = parser.split(' ')\n",
    "            #print(split_by_space)\n",
    "            temp1 =  [x for x in split_by_space if x != '->']\n",
    "            temp2 =  [x for x in temp1 if x != '']\n",
    "            temp2[-1] = temp2[-1].split('\\n')[0]\n",
    "            #print(temp2)\n",
    "            x=temp2.pop(1)\n",
    "            temp2[0]=temp2[0]+' '+x\n",
    "            #print(temp1)\n",
    "            #print(temp2)\n",
    "        #print(temp1)\n",
    "        #temp3 =  [x.split('\\n')[0] for x in temp2 if '\\n' in x]\n",
    "        #print(temp2)\n",
    "        if(temp2[-1]!='Background'):\n",
    "            #print(temp2[-1])\n",
    "            csv_writer.writerow(temp2)\n",
    "#         Botnet_data.loc[index-1] = pd.Series(temp2, index=column_name)\n",
    "    output.seek(0) # we need to get back to the start of the BytesIO\n",
    "    Botnet_data = read_csv(output)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   2011-08-18 10:19:13.347  4.985  TCP      147.32.80.13:80  \\\n",
      "0  2011-08-18 10:19:13.392  0.000  TCP  147.32.86.110:48102   \n",
      "1  2011-08-18 10:19:13.411  4.921  TCP   147.32.85.88:56949   \n",
      "2  2011-08-18 10:19:13.460  4.742  TCP    147.32.84.59:2768   \n",
      "3  2011-08-18 10:19:13.486  0.000  TCP   147.32.84.59:56058   \n",
      "4  2011-08-18 10:19:13.689  4.434  TCP  147.32.84.164:34588   \n",
      "\n",
      "   147.32.85.88:56949 PA_  0   91  86277  1  LEGITIMATE  \n",
      "0  74.125.232.214:443  A_  0    1     66  1  LEGITIMATE  \n",
      "1     147.32.80.13:80  A_  0   49   3234  1  LEGITIMATE  \n",
      "2   74.125.108.208:80  A_  0  118   7080  1  LEGITIMATE  \n",
      "3  74.125.232.215:443  A_  0    1     60  1  LEGITIMATE  \n",
      "4   195.24.232.164:80  A_  0   30   1980  1  LEGITIMATE  \n"
     ]
    }
   ],
   "source": [
    "print(Botnet_data.head())\n",
    "Botnet_data.columns = column_name\n",
    "Botnet_data.head()\n",
    "Botnet_data.to_csv('Botnet_data111.csv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "645357"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(Botnet_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dateflowstart</th>\n",
       "      <th>Durat</th>\n",
       "      <th>Prot</th>\n",
       "      <th>SrcIPAddr:Port</th>\n",
       "      <th>DstIPAddr:Port</th>\n",
       "      <th>Flags</th>\n",
       "      <th>Tos</th>\n",
       "      <th>PacketsBytes</th>\n",
       "      <th>Flows</th>\n",
       "      <th>Label</th>\n",
       "      <th>Labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-08-18 10:19:13.392</td>\n",
       "      <td>0.000</td>\n",
       "      <td>TCP</td>\n",
       "      <td>147.32.86.110:48102</td>\n",
       "      <td>74.125.232.214:443</td>\n",
       "      <td>A_</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>66</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-08-18 10:19:13.411</td>\n",
       "      <td>4.921</td>\n",
       "      <td>TCP</td>\n",
       "      <td>147.32.85.88:56949</td>\n",
       "      <td>147.32.80.13:80</td>\n",
       "      <td>A_</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>3234</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-08-18 10:19:13.460</td>\n",
       "      <td>4.742</td>\n",
       "      <td>TCP</td>\n",
       "      <td>147.32.84.59:2768</td>\n",
       "      <td>74.125.108.208:80</td>\n",
       "      <td>A_</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>7080</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-08-18 10:19:13.486</td>\n",
       "      <td>0.000</td>\n",
       "      <td>TCP</td>\n",
       "      <td>147.32.84.59:56058</td>\n",
       "      <td>74.125.232.215:443</td>\n",
       "      <td>A_</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-08-18 10:19:13.689</td>\n",
       "      <td>4.434</td>\n",
       "      <td>TCP</td>\n",
       "      <td>147.32.84.164:34588</td>\n",
       "      <td>195.24.232.164:80</td>\n",
       "      <td>A_</td>\n",
       "      <td>0</td>\n",
       "      <td>30</td>\n",
       "      <td>1980</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Dateflowstart  Durat Prot       SrcIPAddr:Port  \\\n",
       "0  2011-08-18 10:19:13.392  0.000  TCP  147.32.86.110:48102   \n",
       "1  2011-08-18 10:19:13.411  4.921  TCP   147.32.85.88:56949   \n",
       "2  2011-08-18 10:19:13.460  4.742  TCP    147.32.84.59:2768   \n",
       "3  2011-08-18 10:19:13.486  0.000  TCP   147.32.84.59:56058   \n",
       "4  2011-08-18 10:19:13.689  4.434  TCP  147.32.84.164:34588   \n",
       "\n",
       "       DstIPAddr:Port Flags  Tos  PacketsBytes  Flows  Label      Labels  \n",
       "0  74.125.232.214:443    A_    0             1     66      1  LEGITIMATE  \n",
       "1     147.32.80.13:80    A_    0            49   3234      1  LEGITIMATE  \n",
       "2   74.125.108.208:80    A_    0           118   7080      1  LEGITIMATE  \n",
       "3  74.125.232.215:443    A_    0             1     60      1  LEGITIMATE  \n",
       "4   195.24.232.164:80    A_    0            30   1980      1  LEGITIMATE  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print(pd.unique(Botnet_data['SrcIPAddr:Port']))\n",
    "# print(Botnet_data.shape)\n",
    "# temp =Botnet_data.groupby('SrcIPAddr:Port')\n",
    "# temp.describe()\n",
    "# for key, item in temp:\n",
    "#     print (temp.get_group(key), \"\\n\\n\")\n",
    "Botnet_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**clustering all features**\n",
    "\n",
    "\n",
    "possible features: Durat/Prot/Flags/Tos/PacketsBytes/Flows\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------Durat---------------------\n",
      "0.2    0.000\n",
      "0.4    0.000\n",
      "0.6    0.000\n",
      "0.8    0.442\n",
      "Name: Durat, dtype: float64\n",
      "-------------Prot---------------------\n",
      "['TCP' 'UDP' 'ICMP']\n",
      "-------------Flags---------------------\n",
      "['A_' 'PA_' 'FA_' 'SPA_' 'FPA_' 'INT' 'FSA_' '_FSA' 'FSPA_' '_FSPA' 'S_'\n",
      " 'RA_' 'FSRPA_' 'SA_' '_FSRPA' 'SRPA_' 'FRPA_' 'ECO' 'URH' 'SR_' 'FRA_'\n",
      " 'RPA_' 'R_' 'FSPAEC_' 'SRA_' '_FSRA' 'URP' 'PAC_' 'MAS' 'TST' 'IRR' 'ECR'\n",
      " 'RTS' 'RTA' 'IRQ' 'UNK' 'MSR' 'TSR' 'SEC' 'ROB' 'MRQ' 'RED' 'IAH' 'TXD'\n",
      " 'DNQ' 'PTB' 'PAR' 'NRA' 'WAY' 'PHO' '___' 'AHA' 'NRS' 'MHR' 'UR' 'NNA'\n",
      " 'MRP' 'TRC' 'DCE' 'SKP' 'SRC' 'NNS' 'DNP' 'URN' 'URPRE' 'URS' 'URNU'\n",
      " 'URCUT' 'URISO' 'URNPRO' 'URHPRO' 'URHTOS' 'URHU' 'SPAC_' 'SEC_' 'FSRA_'\n",
      " 'URFIL' 'FSPAC_']\n",
      "-------------Tos---------------------\n",
      "0.2    0.0\n",
      "0.4    0.0\n",
      "0.6    0.0\n",
      "0.8    0.0\n",
      "Name: Tos, dtype: float64\n",
      "-------------PacketsBytes---------------------\n",
      "0.2    1.0\n",
      "0.4    1.0\n",
      "0.6    2.0\n",
      "0.8    5.0\n",
      "Name: PacketsBytes, dtype: float64\n",
      "-------------Flows---------------------\n",
      "0.2     132.0\n",
      "0.4    1066.0\n",
      "0.6    1066.0\n",
      "0.8    2132.0\n",
      "Name: Flows, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print('-------------Durat---------------------')\n",
    "print(Botnet_data['Durat'].quantile([0.2,0.4,0.6,0.8]))\n",
    "print('-------------Prot---------------------')\n",
    "print(pd.unique(Botnet_data['Prot']))\n",
    "print('-------------Flags---------------------')\n",
    "print(pd.unique(Botnet_data['Flags']))\n",
    "print('-------------Tos---------------------')\n",
    "print(Botnet_data['Tos'].quantile([0.2,0.4,0.6,0.8]))\n",
    "print('-------------PacketsBytes---------------------')\n",
    "print(Botnet_data['PacketsBytes'].quantile([0.2,0.4,0.6,0.8]))\n",
    "print('-------------Flows---------------------')\n",
    "print(Botnet_data['Flows'].quantile([0.2,0.4,0.6,0.8]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so we abandon 'Tos' and assign value for categorical data. Then we factorize our categorical features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Dateflowstart  Durat  Prot       SrcIPAddr:Port  \\\n",
      "0  2011-08-18 10:19:13.392  0.000     1  147.32.86.110:48102   \n",
      "1  2011-08-18 10:19:13.411  4.921     1   147.32.85.88:56949   \n",
      "2  2011-08-18 10:19:13.460  4.742     1    147.32.84.59:2768   \n",
      "3  2011-08-18 10:19:13.486  0.000     1   147.32.84.59:56058   \n",
      "4  2011-08-18 10:19:13.689  4.434     1  147.32.84.164:34588   \n",
      "\n",
      "       DstIPAddr:Port  Flags  Tos  PacketsBytes  Flows  Label      Labels  \n",
      "0  74.125.232.214:443      0    0             1     66      1  LEGITIMATE  \n",
      "1     147.32.80.13:80      0    0            49   3234      1  LEGITIMATE  \n",
      "2   74.125.108.208:80      0    0           118   7080      1  LEGITIMATE  \n",
      "3  74.125.232.215:443      0    0             1     60      1  LEGITIMATE  \n",
      "4   195.24.232.164:80      0    0            30   1980      1  LEGITIMATE  \n"
     ]
    }
   ],
   "source": [
    "# replace_port = {'TCP':1, 'UDP':2, 'ICMP':3}\n",
    "# replace_flag = {'A_':1, 'FA_':2, 'PA_':3, 'FPA_':4, 'FSPA_':5, '_FSPA':6, 'INT':7, 'FSA_':8, '_FSA':9, 'SPA_':10,\n",
    "#  'SRPA_':11, 'RA_':12, 'FRPA_':13, 'FSRPA_':14, 'URH':15, 'SA_':16, 'RPA_':17, 'FRA_':18, 'ECO' :19,'S_' :20,'R_':21,\n",
    "#  '_FSRPA':22, 'FSPAC_':23, 'SRA_':24, 'TXD':25, 'URFIL' :26,'SR_':27, 'URP':28, '_FSRA':29, 'URHPRO':30, 'URN':31}\n",
    "\n",
    "stacked = Botnet_data[['Flags','Prot']].stack()\n",
    "Botnet_data[['Flags','Prot']] = pd.Series(stacked.factorize()[0], index=stacked.index).unstack()\n",
    "print(Botnet_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:6: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  \n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  import sys\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:8: FutureWarning: reshape is deprecated and will raise in a subsequent release. Please use .values.reshape(...) instead\n",
      "  \n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x20737e05240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x20737eb11d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x20739750e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Durat/Prot/Flags/PacketsBytes/Flows\n",
    "sse1 = {}\n",
    "sse4 = {}\n",
    "sse5 = {}\n",
    "for k in range(1, 10):\n",
    "    kmeans1 = KMeans(n_clusters=k, max_iter=1000).fit(Botnet_data['Durat'].reshape(-1, 1))\n",
    "    kmeans4 = KMeans(n_clusters=k, max_iter=1000).fit(Botnet_data['PacketsBytes'].reshape(-1, 1))\n",
    "    kmeans5 = KMeans(n_clusters=k, max_iter=1000).fit(Botnet_data['Flows'].reshape(-1, 1))\n",
    "    Botnet_data['ClusterDurat'] = kmeans1.labels_\n",
    "    Botnet_data['ClusterPacketsBytes'] = kmeans4.labels_\n",
    "    Botnet_data['ClusterFlows'] = kmeans5.labels_\n",
    "    #print(data[\"clusters\"])\n",
    "    sse1[k] = kmeans1.inertia_ # Inertia: Sum of distances of samples to their closest cluster center\n",
    "    sse4[k] = kmeans4.inertia_\n",
    "    sse5[k] = kmeans5.inertia_\n",
    "plt.figure()\n",
    "plt.plot(list(sse1.keys()), list(sse1.values()),label = 'Durat')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel(\"Number of cluster\")\n",
    "plt.ylabel(\"SSE\")\n",
    "plt.show()\n",
    "plt.plot(list(sse4.keys()), list(sse4.values()),label = 'PacketsBytes')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel(\"Number of cluster\")\n",
    "plt.ylabel(\"SSE\")\n",
    "plt.show()\n",
    "plt.plot(list(sse5.keys()), list(sse5.values()),label = 'Flows')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel(\"Number of cluster\")\n",
    "plt.ylabel(\"SSE\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so for durat we choose 2 as number of clusters, 3 for packetbytes and 4 for flows. \n",
    "\n",
    "Then we calculate the threshold of different features, results can be found below.\n",
    "\n",
    "we assign  0 when DURAT is smaller than 0.22, or we set 1.\n",
    "\n",
    "we assign 0 when PacketsBytes is smaller than 1.0. Or we set 1.\n",
    "\n",
    "we assign 0 when Flows is smaller than 261.0. For its value between 261.0 and 1066.0, we set 1 and for value from 1066.0 to 1306.0 we set 2, or we set 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------Durat---------------------\n",
      "0.75    0.222\n",
      "Name: Durat, dtype: float64\n",
      "-------------PacketsBytes---------------------\n",
      "0.33    1.0\n",
      "0.66    2.0\n",
      "Name: PacketsBytes, dtype: float64\n",
      "-------------Flows---------------------\n",
      "0.25     261.0\n",
      "0.50    1066.0\n",
      "0.75    1306.0\n",
      "Name: Flows, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print('-------------Durat---------------------')\n",
    "print(Botnet_data['Durat'].quantile([0.75]))\n",
    "print('-------------PacketsBytes---------------------')\n",
    "print(Botnet_data['PacketsBytes'].quantile([0.33,0.66]))\n",
    "print('-------------Flows---------------------')\n",
    "print(Botnet_data['Flows'].quantile([0.25,0.5,0.75]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(645357, 14)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Durat</th>\n",
       "      <th>Prot</th>\n",
       "      <th>Flags</th>\n",
       "      <th>PacketsBytes</th>\n",
       "      <th>Flows</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>6.453570e+05</td>\n",
       "      <td>645357.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.628296</td>\n",
       "      <td>10.347725</td>\n",
       "      <td>17.386899</td>\n",
       "      <td>17.501792</td>\n",
       "      <td>1.347249e+04</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.399220</td>\n",
       "      <td>9.414517</td>\n",
       "      <td>15.481148</td>\n",
       "      <td>123.108235</td>\n",
       "      <td>1.337653e+05</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000e+01</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.610000e+02</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.066000e+03</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.222000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.306000e+03</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>22.581000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>16937.000000</td>\n",
       "      <td>2.497247e+07</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Durat           Prot          Flags   PacketsBytes  \\\n",
       "count  645357.000000  645357.000000  645357.000000  645357.000000   \n",
       "mean        0.628296      10.347725      17.386899      17.501792   \n",
       "std         1.399220       9.414517      15.481148     123.108235   \n",
       "min         0.000000       1.000000       0.000000       1.000000   \n",
       "25%         0.000000       1.000000       2.000000       1.000000   \n",
       "50%         0.000000       7.000000      15.000000       1.000000   \n",
       "75%         0.222000      20.000000      34.000000       4.000000   \n",
       "max        22.581000      20.000000      80.000000   16937.000000   \n",
       "\n",
       "              Flows     Label  \n",
       "count  6.453570e+05  645357.0  \n",
       "mean   1.347249e+04       1.0  \n",
       "std    1.337653e+05       0.0  \n",
       "min    6.000000e+01       1.0  \n",
       "25%    2.610000e+02       1.0  \n",
       "50%    1.066000e+03       1.0  \n",
       "75%    1.306000e+03       1.0  \n",
       "max    2.497247e+07       1.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(Botnet_data.shape)\n",
    "new_column_name = ['Dateflowstart', 'Durat', 'Prot', 'SrcIPAddr:Port', 'DstIPAddr:Port', 'Flags', 'PacketsBytes', 'Flows', 'Label', 'Labels']\n",
    "numeric_data = pd.DataFrame(column_name)\n",
    "numeric_data = Botnet_data[new_column_name].copy()\n",
    "numeric_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Discretization**\n",
    "\n",
    "This part is used for part3 and part4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:5: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "  \"\"\"\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:10: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:15: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "  from ipykernel import kernelapp as app\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:7: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "  import sys\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:12: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "  if sys.path[0] == '':\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:23: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:18: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n",
      "C:\\Users\\zinaw\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:21: FutureWarning: set_value is deprecated and will be removed in a future release. Please use .at[] or .iat[] accessors instead\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Durat</th>\n",
       "      <th>Prot</th>\n",
       "      <th>Flags</th>\n",
       "      <th>PacketsBytes</th>\n",
       "      <th>Flows</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.000000</td>\n",
       "      <td>645357.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.251275</td>\n",
       "      <td>10.347725</td>\n",
       "      <td>17.386899</td>\n",
       "      <td>0.416758</td>\n",
       "      <td>1.673449</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.433747</td>\n",
       "      <td>9.414517</td>\n",
       "      <td>15.481148</td>\n",
       "      <td>0.493023</td>\n",
       "      <td>1.103632</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>34.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Durat           Prot          Flags   PacketsBytes  \\\n",
       "count  645357.000000  645357.000000  645357.000000  645357.000000   \n",
       "mean        0.251275      10.347725      17.386899       0.416758   \n",
       "std         0.433747       9.414517      15.481148       0.493023   \n",
       "min         0.000000       1.000000       0.000000       0.000000   \n",
       "25%         0.000000       1.000000       2.000000       0.000000   \n",
       "50%         0.000000       7.000000      15.000000       0.000000   \n",
       "75%         1.000000      20.000000      34.000000       1.000000   \n",
       "max         1.000000      20.000000      80.000000       1.000000   \n",
       "\n",
       "               Flows     Label  \n",
       "count  645357.000000  645357.0  \n",
       "mean        1.673449       1.0  \n",
       "std         1.103632       0.0  \n",
       "min         0.000000       1.0  \n",
       "25%         1.000000       1.0  \n",
       "50%         2.000000       1.0  \n",
       "75%         3.000000       1.0  \n",
       "max         3.000000       1.0  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for index,vallue in Botnet_data.iterrows():\n",
    "#     ------------------Durat-------------------------\n",
    "#     print(Botnet_data['Durat'][index])\n",
    "    if Botnet_data['Durat'][index] < 0.22:\n",
    "        numeric_data.set_value(index, 'Durat',int(0))\n",
    "    else:\n",
    "        numeric_data.set_value(index, 'Durat',int(1))\n",
    "#     ------------------PacketsBytes-------------------------\n",
    "    if Botnet_data['PacketsBytes'][index] <= 1.0:\n",
    "        numeric_data.set_value(index, 'PacketsBytes', 0)\n",
    "    else:\n",
    "        numeric_data.set_value(index, 'PacketsBytes',1)\n",
    "#     ------------------Flows-------------------------\n",
    "    if Botnet_data['Flows'][index] < 261.0:\n",
    "        numeric_data.set_value(index, 'Flows', 0)\n",
    "    else:\n",
    "        if 261.0 <= Botnet_data['Flows'][index]<1066.0:\n",
    "            numeric_data.set_value(index, 'Flows', 1)\n",
    "        else:\n",
    "            if 1066.0 <= Botnet_data['Flows'][index]<1306.0:\n",
    "                numeric_data.set_value(index, 'Flows', 2)\n",
    "            else:\n",
    "                numeric_data.set_value(index, 'Flows', 3)\n",
    "numeric_data['Durat'] = numeric_data['Durat'].astype(int)\n",
    "numeric_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dateflowstart</th>\n",
       "      <th>Durat</th>\n",
       "      <th>Prot</th>\n",
       "      <th>SrcIPAddr:Port</th>\n",
       "      <th>DstIPAddr:Port</th>\n",
       "      <th>Flags</th>\n",
       "      <th>PacketsBytes</th>\n",
       "      <th>Flows</th>\n",
       "      <th>Label</th>\n",
       "      <th>Labels</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-08-18 10:19:13.392</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.86.110:48102</td>\n",
       "      <td>74.125.232.214:443</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-08-18 10:19:13.411</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.85.88:56949</td>\n",
       "      <td>147.32.80.13:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-08-18 10:19:13.460</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.59:2768</td>\n",
       "      <td>74.125.108.208:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-08-18 10:19:13.486</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.59:56058</td>\n",
       "      <td>74.125.232.215:443</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-08-18 10:19:13.689</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.164:34588</td>\n",
       "      <td>195.24.232.164:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Dateflowstart  Durat  Prot       SrcIPAddr:Port  \\\n",
       "0  2011-08-18 10:19:13.392      0     1  147.32.86.110:48102   \n",
       "1  2011-08-18 10:19:13.411      1     1   147.32.85.88:56949   \n",
       "2  2011-08-18 10:19:13.460      1     1    147.32.84.59:2768   \n",
       "3  2011-08-18 10:19:13.486      0     1   147.32.84.59:56058   \n",
       "4  2011-08-18 10:19:13.689      1     1  147.32.84.164:34588   \n",
       "\n",
       "       DstIPAddr:Port  Flags  PacketsBytes  Flows  Label      Labels  \n",
       "0  74.125.232.214:443      0             0      0      1  LEGITIMATE  \n",
       "1     147.32.80.13:80      0             1      3      1  LEGITIMATE  \n",
       "2   74.125.108.208:80      0             1      3      1  LEGITIMATE  \n",
       "3  74.125.232.215:443      0             0      0      1  LEGITIMATE  \n",
       "4   195.24.232.164:80      0             1      3      1  LEGITIMATE  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "3\n",
      "78\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "print(len(np.unique(numeric_data['Durat'])))\n",
    "print(len(np.unique(numeric_data['Prot'])))\n",
    "print(len(np.unique(numeric_data['Flags'])))\n",
    "print(len(np.unique(numeric_data['PacketsBytes'])))\n",
    "print(len(np.unique(numeric_data['Flows'])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now we can apply algorithm1 in paper to combine all features\n",
    "\n",
    "as mentioned, for durat we choose 2 as number of clusters, 3 for prot, 78 for flags, 2 for packetbytes and 4 for flows. our space is 2\\*3\\*78\\*2\\*4=3744"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "645357\n"
     ]
    }
   ],
   "source": [
    "# features: durat, prot, flags, packetbytes, flows\n",
    "# 2*3*78*2*4=3744\n",
    "feature_dict = {'Durat':2, 'Prot':3, 'Flags':78, 'PacketsBytes':2, 'Flows':4}\n",
    "code_list = []\n",
    "for index, row in numeric_data.iterrows():\n",
    "    code = 0\n",
    "    spacesize = 3744\n",
    "    code = code + numeric_data['Durat'][index]*(spacesize/feature_dict['Durat'])\n",
    "    spacesize = spacesize/feature_dict['Durat']\n",
    "    code = code + numeric_data['Prot'][index]*(spacesize/feature_dict['Prot'])\n",
    "    spacesize = spacesize/feature_dict['Prot']\n",
    "    code = code + numeric_data['Flags'][index]*(spacesize/feature_dict['Flags'])\n",
    "    spacesize = spacesize/feature_dict['Flags']\n",
    "    code = code + numeric_data['PacketsBytes'][index]*(spacesize/feature_dict['PacketsBytes'])\n",
    "    spacesize = spacesize/feature_dict['PacketsBytes']\n",
    "    code = code + numeric_data['Flows'][index]*(spacesize/feature_dict['Flows'])\n",
    "    spacesize = spacesize/feature_dict['Flows']\n",
    "    code_list.append(int(code)) \n",
    "print(len(code_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Dateflowstart</th>\n",
       "      <th>Durat</th>\n",
       "      <th>Prot</th>\n",
       "      <th>SrcIPAddr:Port</th>\n",
       "      <th>DstIPAddr:Port</th>\n",
       "      <th>Flags</th>\n",
       "      <th>PacketsBytes</th>\n",
       "      <th>Flows</th>\n",
       "      <th>Label</th>\n",
       "      <th>Labels</th>\n",
       "      <th>code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-08-18 10:19:13.392</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.86.110:48102</td>\n",
       "      <td>74.125.232.214:443</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "      <td>624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-08-18 10:19:13.411</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.85.88:56949</td>\n",
       "      <td>147.32.80.13:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "      <td>2503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-08-18 10:19:13.460</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.59:2768</td>\n",
       "      <td>74.125.108.208:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "      <td>2503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-08-18 10:19:13.486</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.59:56058</td>\n",
       "      <td>74.125.232.215:443</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "      <td>624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-08-18 10:19:13.689</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>147.32.84.164:34588</td>\n",
       "      <td>195.24.232.164:80</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>LEGITIMATE</td>\n",
       "      <td>2503</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Dateflowstart  Durat  Prot       SrcIPAddr:Port  \\\n",
       "0  2011-08-18 10:19:13.392      0     1  147.32.86.110:48102   \n",
       "1  2011-08-18 10:19:13.411      1     1   147.32.85.88:56949   \n",
       "2  2011-08-18 10:19:13.460      1     1    147.32.84.59:2768   \n",
       "3  2011-08-18 10:19:13.486      0     1   147.32.84.59:56058   \n",
       "4  2011-08-18 10:19:13.689      1     1  147.32.84.164:34588   \n",
       "\n",
       "       DstIPAddr:Port  Flags  PacketsBytes  Flows  Label      Labels  code  \n",
       "0  74.125.232.214:443      0             0      0      1  LEGITIMATE   624  \n",
       "1     147.32.80.13:80      0             1      3      1  LEGITIMATE  2503  \n",
       "2   74.125.108.208:80      0             1      3      1  LEGITIMATE  2503  \n",
       "3  74.125.232.215:443      0             0      0      1  LEGITIMATE   624  \n",
       "4   195.24.232.164:80      0             1      3      1  LEGITIMATE  2503  "
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "code_ = pd.Series(code_list)\n",
    "numeric_data['code'] = code_.values\n",
    "numeric_data.head()\n",
    "# numeric_data.to_csv('numeric_data_scenario10.csv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_source = np.unique(numeric_data['SrcIPAddr:Port'])\n",
    "source_dict = defaultdict(list)\n",
    "for val in numeric_data.iterrows():\n",
    "    source_dict[val[1][3]].append(val[1][10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67960\n",
      "67960\n"
     ]
    }
   ],
   "source": [
    "print(len(all_source))\n",
    "print(len(source_dict))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length_of_training data sequence: 19136\n",
      "147.32.84.191 length of grams: 20821\n",
      "147.32.84.192 length of grams: 20813\n",
      "147.32.84.193 length of grams: 19875\n",
      "147.32.84.204 length of grams: 22145\n",
      "147.32.84.205 length of grams: 23871\n",
      "147.32.84.206 length of grams: 22488\n",
      "147.32.84.207 length of grams: 21165\n",
      "147.32.84.208 length of grams: 22183\n",
      "147.32.84.209 length of grams: 19404\n",
      "147.32.84.170 length of grams: 12\n",
      "147.32.84.134 length of grams: 0\n",
      "147.32.84.164 length of grams: 694\n",
      "length_of_sequence: 193471\n"
     ]
    }
   ],
   "source": [
    "def find_ngrams(input_list, n):\n",
    "    return zip(*[input_list[i:] for i in range(n)])\n",
    "infected_host = ['147.32.84.165','147.32.84.191','147.32.84.192','147.32.84.193','147.32.84.204',\n",
    "                 '147.32.84.205','147.32.84.206','147.32.84.207','147.32.84.208','147.32.84.209']\n",
    "normal_host = ['147.32.84.170','147.32.84.134','147.32.84.164']\n",
    "# not reliable: '147.32.87.36','147.32.80.9','147.32.87.11'\n",
    "choose_infected_host = '147.32.84.165'\n",
    "test_ip = ['147.32.84.191','147.32.84.192','147.32.84.193','147.32.84.204','147.32.84.205',\n",
    "           '147.32.84.206','147.32.84.207','147.32.84.208','147.32.84.209','147.32.84.170',\n",
    "           '147.32.84.134','147.32.84.164']\n",
    "n = 3\n",
    "infected_gram_dict = defaultdict(list)\n",
    "normal_gram_dict = defaultdict(list)\n",
    "first_two_list = []\n",
    "gram_list = []\n",
    "possible_gram = source_dict[choose_infected_host]\n",
    "grams = list(find_ngrams(possible_gram, n))\n",
    "for pick_first_two in grams:\n",
    "    first_two_list.append(pick_first_two[0:2])\n",
    "gram_list.append(grams)\n",
    "print('length_of_training data sequence:', len(gram_list[0]))\n",
    "\n",
    "sliding_window_width = 4\n",
    "test_gram_dict = defaultdict(list)\n",
    "test_list = []\n",
    "length_of_sequence = 0\n",
    "for temp in test_ip:\n",
    "    possible_gram = source_dict[temp]\n",
    "    grams = list(find_ngrams(possible_gram, sliding_window_width))\n",
    "    print(temp,'length of grams:', len(grams))\n",
    "    test_gram_dict[temp] = grams\n",
    "    test_list.append(list(set(grams)))\n",
    "    length_of_sequence = length_of_sequence+len(grams)\n",
    "print('length_of_sequence:', length_of_sequence)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we have 706 normal sequences and 192765 infected sequences(99.6%). In total we have 193471 sequences in test set and 19136 sequences in training set. Now we create labels for sequences. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193471 [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "def zerolistmaker(n):\n",
    "    listofzeros = [0] * n\n",
    "    return listofzeros\n",
    "def oneslistmaker(n):\n",
    "    listofones = [1] * n\n",
    "    return listofones\n",
    "test_sequence_label = oneslistmaker(192765) + zerolistmaker(706)\n",
    "print(len(test_sequence_label),test_sequence_label[192760:192770])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "to avoid probability of 0, we add 1 for each counter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193471\n"
     ]
    }
   ],
   "source": [
    "test_prob = []\n",
    "cookie_dict ={}\n",
    "for single_test_ip in test_ip:\n",
    "    single_ip_grams = test_gram_dict[single_test_ip]\n",
    "    for test_gram in single_ip_grams:\n",
    "        if test_gram[0:2] in cookie_dict:\n",
    "            prob1 = cookie_dict[test_gram[0:2]]\n",
    "        else:\n",
    "            prob1 = (first_two_list.count(test_gram[0:2])+1)/len(gram_list[0])\n",
    "        if test_gram[0:3] in cookie_dict:\n",
    "            prob2 = cookie_dict[test_gram[0:3]]\n",
    "        else:\n",
    "            prob2 = (gram_list[0].count(test_gram[0:3])+1)/len(gram_list[0])\n",
    "        if test_gram[1:4] in cookie_dict:\n",
    "            prob3 =  cookie_dict[test_gram[1:4]]\n",
    "        else:\n",
    "            prob3 = (gram_list[0].count(test_gram[1:4])+1)/len(gram_list[0])\n",
    "        cookie_dict[test_gram[0:2]]= prob1\n",
    "        cookie_dict[test_gram[0:3]]= prob2\n",
    "        cookie_dict[test_gram[1:4]]= prob3\n",
    "        prob = prob1*prob2*prob3\n",
    "        test_prob.append(prob)\n",
    "print(len(test_prob))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4270740634742588e-13"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.percentile(test_prob, 0.4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "193471\n",
      "193471\n"
     ]
    }
   ],
   "source": [
    "predicted_sequence_label =  []\n",
    "for probability in test_prob:\n",
    "    if probability<= 1.4270740634742588e-13:\n",
    "        label = 0\n",
    "    else:\n",
    "        label = 1\n",
    "    predicted_sequence_label.append(label)  \n",
    "print(len(predicted_sequence_label))\n",
    "print(len(test_sequence_label))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TP: 192361\n",
      "FP: 0\n",
      "TN: 706\n",
      "FN: 404\n",
      "precision: 1.0\n",
      "recall: 0.9979041838508028\n",
      "accuracy 0.9979118317473936\n"
     ]
    }
   ],
   "source": [
    "TP=0\n",
    "FN=0\n",
    "TN=0\n",
    "FP=0\n",
    "for index,val in enumerate(test_sequence_label):\n",
    "    if predicted_sequence_label[index]==1 and val ==1:\n",
    "        TP +=1\n",
    "    if predicted_sequence_label[index]==0 and val ==1:\n",
    "        FN +=1\n",
    "    if predicted_sequence_label[index]==0 and val ==0:\n",
    "        TN +=1\n",
    "    if predicted_sequence_label[index]==1 and val ==0:\n",
    "        FP +=1\n",
    "#     print(index, predicted_sequence_label[index],val,'\\n' ,TP,FN,TN,FP)\n",
    "print ('TP:',TP)\n",
    "print ('FP:',FP)\n",
    "print ('TN:',TN)\n",
    "print ('FN:',FN)\n",
    "print ('precision:' ,1.0 * TP/(TP+FP))\n",
    "print ('recall:' ,1.0 *TP/(TP+FN))\n",
    "print('accuracy',(TP+TN)/len(predicted_sequence_label))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now we calculate host level accuracy. If over 50% sequences are defined as infected, we define host as infected. Or we define it as normal. I print sum of predicted label for each host, which means the number of infected sequences in our prediction. We know the ground truth is that the first 9 host are infected and the rest three are normal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20781\n",
      "20764\n",
      "19838\n",
      "22097\n",
      "23817\n",
      "22452\n",
      "21120\n",
      "22127\n",
      "19364\n",
      "1\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# 147.32.84.191 length of grams: 20821\n",
    "print(sum(predicted_sequence_label[0:20820]))\n",
    "# 20781 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.192 length of grams: 20813\n",
    "print(sum(predicted_sequence_label[20820:41633]))\n",
    "# 20764 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.193 length of grams: 19875\n",
    "print(sum(predicted_sequence_label[41633:61508]))\n",
    "# 19838 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.204 length of grams: 22145\n",
    "print(sum(predicted_sequence_label[61508:83653]))\n",
    "# 22097 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.205 length of grams: 23871\n",
    "print(sum(predicted_sequence_label[83653:107524]))\n",
    "# 23817 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.206 length of grams: 22488\n",
    "print(sum(predicted_sequence_label[107524:130012]))\n",
    "# 22452 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.207 length of grams: 21165\n",
    "print(sum(predicted_sequence_label[130012:151177]))\n",
    "# 21120 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.208 length of grams: 22183\n",
    "print(sum(predicted_sequence_label[151177:173360]))\n",
    "# 22127 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.209 length of grams: 19404\n",
    "print(sum(predicted_sequence_label[173360:192764]))\n",
    "# 19364 so we assign this host as infected\n",
    "\n",
    "# 147.32.84.170 length of grams: 12\n",
    "print(sum(predicted_sequence_label[192764:192776]))\n",
    "# 1 so we assign this host as normal\n",
    "\n",
    "# 147.32.84.134 length of grams: 0\n",
    "\n",
    "# 147.32.84.164 length of grams: 694\n",
    "print(sum(predicted_sequence_label[192776:193470]))\n",
    "# 0 so we assign this host as normal\n",
    "\n",
    "# length_of_sequence: 193471"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
